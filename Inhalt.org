* 0 Über diese Online Version
  - Diese org mode "präsentation" habe ich für den Workshop auf dem Linux Info Tag 2016 in der Hochschule Augsburg verwendet
  - Ein großer Teil des Workshops bestand aus live demos und "Quellcode zusammen anschauen und besprechen"
  - Dementsprechend fehlen diese Teile hier in den "Folien" oder es steht da nur "live-demo" und es ist an einigen stellen etwas unvollständig
  - Einige Teilnehmer haben mich dennoch gefragt ob ich diese minimalistische Präsentation zum Nachschauen veröffentlichen kann
  - Deswegen ist sie jetzt hier auf Github
  - Aber ohne Garantie auf Vollständigkeit
  - Ergänzungen in Form von Pull requests werden aber gerne angenommen und gemerged


* 1 Einleitung
** Überblick über Vortrag
   - einmal das inhaltsverzeichnis zeigen, kurz zusammenfassung
** Wer bin ich
   - Richard Sailer
** Warum linux kernel entwicklung
** kann ich da einfach so mitmachen?
   - ja

** Was kann ich nach dem kurs realistisch was nicht


* 2 Die Repos, Kernelversionen und der Entwicklungsprozess
  - Alle gitrepos sind einsehbar auf http://git.kernel.org (cgit webinterface)
  - ui es gibt verschiedene repos wie läuft das?
    - Es gibt nicht ein repo und viele branches sondern für jeden "branch" ein eigenes repo
    - also:
      - ein net repo
      - ein stable repo
      - ein mainline repo
      - ein kvm repo
      - usw.
  - Zusammenhang der Repos (sehr vereinfacht): 

     #+CAPTION: Die verschiedenen Linux Kernel Repos und wie sie zusammenhängen (sehr vereinfacht)
     #+NAME:  graph_of_branches
     [[./graph_of_branches.png]]

    - *subsystem-specific-repos*
      - Haben alle einen eigenen Maintainer manche sogar mehr
      - Beispiele: net, mm, virt, xen usw.
      - Dort senden die Developer ihre patches hin
      - Diese Maintainer schicken regelmäßig pull requests an linus torvalds
        - mit git request-pull :p sendet auch eine Email

    - *linux-next*
      - Da wird einfach nur täglich alles neue aus allen subsystem repos reingemüllt
      - um zu sehen was bricht und was nicht
      - wird nicht produktiv verwendet ist nur "indikator" für die anderen developer
    - *main-kernel-tree*
      - wird von linus torvalds gemaintaint
      - er holt sich hin und wieder änderungen aus den subsystemen nachdem sie da ein paar tage lagen und
        - die maintainer ihm pull requests gesendet haben (per email^^)

    - *stable-kernel-tree*
      - wird von greg-kroah-hartmann gemaintaint
      - er holt sich regelmäßig den code aus dem main-kernel-tree
      - und kümmert sich um patches etc.

  - Live demo:
    - 1-2 remotes auschecken
    - Man kann problemlos in einem repo mehrere remotes verwenden und damit produktiv arbeiten
  - es gibt releases alles 6-7 Wochen (Wie 4.3 4.4 usw.)
  - Das läuft so (*Entwicklungsprozess*)
    - Zu Beginn: merge window (2 wochen): linux torvalds halt alles
    - dann fixes (rc1, rc2 usw.)
      - meistens bis rc7
    - dann irgendwann final release 4.3
    - Entwicklungsprozess ist auch nochmal beschrieben in ~Documentation/networking/netdev-FAQ.txt~
    - Wenn man es genau wissen möchte:
      - Files in ~Documentation/development-process/~ lesen
      - zu jeder stage gibt es eine file
    - Wichtig für Developer: keine patches während merge window zeit and die maintainer schicken
      - Da haben die extrem viel zu tun und ignorieren alles
    - auch von den meisten subsystemen gibt es ein stable und ein ~-next~ repo
      - Beispiel:
        - net (kleine änderungen und features)
        - net-next (kommt in das nächste merge window zum neuen release, neue features)
    - Als developer sollte man wissen ob der eigene patch für das stable oder das ~-next~ repo ist
      - und das dementsprechend in die commit message schreiben
        - siehe ~SubmittingPatches~-File für Details über Commit message und repo annotations


* 3 Der Sourcecode (Überblick)
  - Kurz erzählen was die ganzen unterordner bedeuten
    - ~mm/~ ist memory managment
    - ~net/~ ist der network code
    - ~kernel/~ enthält scheduler und alles was auch in einem micro kernel system teil vom kernel wäre
    - ~fs~ ist filesystem
    - usw.
  - in netzwerk ordner rein gehen und code anschauen/erklären
    - verwendete demo war: ~net/ipv4/tcp_timer.c~
    - insbesondere der Retransmission timer

** Der Documentation Unterordner
   - grundsätzlich gilt: doku lesen ist einfacher als Code lesen
   - wichtige files für Einsteiger:
     - ~SubmittingPatches~
     - ~README~
     - Oft gibt es einen Ordner für das Subsystem an dem man werkelt, mit einer faq file drin

* 4 Kompilieren und Testen
- Live demo: ~make menuconfig~ mit Erklärungen
- ~make~
- ~make deb-pkg~
- dauert ca. 30-45 min
  - je nach HDD|SSD und CPU/laptop

* 5 Die Mailinglisten
  - live-demo was da so abgeht
    - gezeigt wurde hauptsächlich netdev
  - kurz über lkml reden: lieber nicht (200-300 Mails pro Tag)
  - für eigene patches besser: liste für das eigene subsystem

* 6 Patches bauen und senden mit git-send-email
  - ~perl /scripts/checkpatch~ anwenden

  - Maintainer finden mit: ~perl /scripts/get_maintainer -f <filename>~

  - Erst commiten in lokales repo

  - Senden mit ~git send-email~
    - Demo:
      - shellbefehl: ~git send-email -1 --subject-prefix="PATCH net"  --to=richi235@arcor.de~
        - ~-1~ : sendet 1 commit (1 rückwärts von HEAD)
        - ~--to=~ legt Empfänger fest, bei mehreren Empfängern mehrere ~--to=~
      - .gitconfig gezeigt
        - der verwendete mail server usw stehen hier
        - muss auf jeden fall vorher konfiguriert werden
    - Gutes tutorial zu git send-email: https://burzalodowa.wordpress.com/2013/10/05/how-to-send-patches-with-git-send-email/
  - Wichtig:
    - immer erst zum testen an sich selber schick
* 7 Buchempfehlungen und gute Quellen

** Gute Bücher:
   - Operating Systems (Design and Implementation) Andrew Tannenbaum
   - Das C Buch von O'reily
** Online Quellen
*** Viel lesen
*** Goooooogeln!!!!!!!!!!!!!!
    - erst wenn man nach 10-15 min nichts gefunden hat
      - die weiteren quellen angucken

*** In Documentation Ordner vom Kernel Schauen!

*** Kernel Newbies Mailing liste
    - zeigen (in thunderbird)
*** Kernelnewbies irc channel
    - zeigen
    - sehr freundliche menschen da
    - nur fragen stellen wenn man vorher schon mal 10-15 min gegoogelt/gesucht hat und nix gefunden hat!

*** Quellcode lesen
**** Pro
     - kann jede frage beantworten
     - maximale genauigkeit
**** Contra
     - sehr zeitintensiv
     - oft zu genau, man hätte es gerne "zusammengefasst" oder "abstrahiert"


* 8 Fragen und Zeitpuffer
